<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1435345190229">{:repl-history {:ide [], :local [&quot;(+ 2 2)&quot; &quot;(defn help\n  \&quot;...\&quot;\n  [args]\n  (let []\n    (cli args\n         [\&quot;-h\&quot; \&quot;--help\&quot; \&quot;Print this help\&quot;\n          :default false :flag true])))&quot; &quot;(help \&quot;das\&quot;)&quot; &quot;(help)&quot; &quot;(help 3)&quot; &quot;(defn sqr [x] (* x x))&quot; &quot;(srq 2)&quot; &quot;(sqr 2)&quot; &quot;(sqr 3)&quot; &quot;(help \&quot;dksalmd\&quot;)&quot; &quot;(help \&quot;-h\&quot;)&quot; &quot;(help \&quot;--help\&quot;)&quot; &quot;(cli help)&quot; &quot;(main \&quot;-h\&quot;)&quot; &quot;(-main \&quot;--no-helpx\&quot;)&quot; &quot;(-main \&quot;--no-help\&quot;)&quot; &quot;(-main \&quot;-h 5\&quot;)&quot; &quot;(-main)&quot; &quot;(-main [\&quot;-h\&quot; \&quot;3\&quot;])&quot; &quot;(-main \&quot;-h\&quot; \&quot;3\&quot;)&quot; &quot;(keys {:test :foo :test2 :bar})&quot; &quot;(-)&quot; &quot;(defn -main [&amp; args]\n\n  (let [[opts args banner]\n        (cli args help version)]\n\n    (println opts \&quot;blah\&quot;)\n    (case (keys opts)\n      :version \&quot;v.32\&quot;\n      :help banner)))&quot; &quot;(doc cond)&quot; &quot;(defn -main [&amp; args]\n\n  (let [[opts args banner]\n        (cli args help version)]\n\n    (println opts \&quot;blah\&quot;)\n    (cond\n          (contains? (keys opts) :help) (:help opts))\n    ))&quot; &quot;(defn -main [&amp; args]\n\n  (let [[opts args banner]\n        (cli args help version)]\n\n    (println opts \&quot;blah\&quot;)\n    (cond\n          (contains? opts :help) (:help opts))\n    ))&quot; &quot;(-m)&quot; &quot;(defn -main [&amp; args]\n\n  (let [[opts args banner]\n        (cli args help version)]\n\n    (println opts \&quot;blah\&quot;)\n    (cond\n      #_(contains? opts :help)\n      (not (nil? (opts :help)))\n      (:help opts)\n      )\n    ))&quot; &quot;(-main \&quot;-v -h\&quot;)&quot; &quot;(defn -main [&amp; args]\n\n  (let [[opts args banner]\n        (cli args [help version])]\n\n    (println opts \&quot;blah\&quot;)\n    (cond\n      (contains? opts :help) (println banner)\n      (contains? opts :version) (opts :version))\n    ))&quot; &quot;(defn -main [&amp; args]\n\n  (let [[opts args banner]\n        (cli args [version])]\n\n    (println opts \&quot;blah\&quot;)\n    (cond\n      (contains? opts :help) (println banner)\n      (contains? opts :version) (:version opts))\n    ))&quot; &quot;(source cli)&quot; &quot;(defn -main [&amp; args]\n\n  (let [[opts args banner]\n        (cli args version help)]\n\n    (println opts \&quot;blah\&quot;)\n    (cond\n      (contains? opts :help) (println banner)\n      (contains? opts :version) (:version opts))\n    ))&quot; &quot;(-main \&quot;--help\&quot;)&quot; &quot;(-main \&quot;-v\&quot;)&quot; &quot;(-main \&quot;-h\&quot;)&quot; &quot;(doc writer)&quot; &quot;()&quot; &quot;(-main \&quot;-c\&quot;)&quot;], :remote []}}</component>
</project>